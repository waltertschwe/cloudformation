AWSTemplateFormatVersion: '2010-09-09'
Description: 'NBC Secret Service'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod
  InputApplicationTagName:
    Description: Tag used for the resources.
    Type: String
    Default: "mam-secret-service"
  InputUserPoolName:
    Description: Name of UserPool resource.
    Type: String
    Default: "mam-secret-userpool"
  InputRefreshTokenValidity:
    Description: The time limit in days refresh token is valid.
    Type: String
    Default: 30
  InputClientName:
    Description: The app client name that containts the client id/secret.
    Type: String
    Default: "mam-secret"
  RouteNameParameter:
    Description: The route key for the route.
    Type: String
    Default: get-secret
  AppPoolClientIDParameter:
    Description: The cognito app client id
    Type: String
    Default: 3nmj773e6cbmgfa5hq4hbqhtnd
  AppPoolIDParameter:
    Description: The cognito user pool to create
    Type: String
    Default: mam_user_pool

Resources:
  # Start Cognito Resources
  UserPoolResource:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: InputUserPoolName
      UserPoolTags:
        application:
          Ref: InputApplicationTagName
  UserPoolClientResource:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - client_credentials
      GenerateSecret: 'true'
      ClientName:
        Ref: InputClientName
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity:
        Ref: InputRefreshTokenValidity
      SupportedIdentityProviders:
      - COGNITO
      AllowedOAuthScopes: 
      - !Join [ "/", [Ref: InputUserPoolName, read_secret_operation]]
      UserPoolId:
        Ref: UserPoolResource
    DependsOn:
    - UserPoolResourceServerResource
  UserPoolResourceServerResource:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      UserPoolId:
        Ref: UserPoolResource
      Identifier:
        Ref: InputUserPoolName
      Name:
        Ref: InputUserPoolName
      Scopes:
      - ScopeName: read_secret_operation
        ScopeDescription: Allows you to decrypt and read the asked for secret.
  UserPoolDomainResource:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join [ "-", [Ref: InputUserPoolName, Ref: Environment]]
      UserPoolId:
        Ref: UserPoolResource
  
  # Start Lambda Resources
  MamSecretLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName: MamSecretLambdaFunctionRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - secretsmanager:GetSecretValue
            Resource:
            - arn:aws:logs:*:*:*
            - "*"
      Tags:
      - Value:
          Ref: InputApplicationTagName
        Key: application

  MamLambdaFunctionResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: getSecretLambda
      Role:
        Fn::GetAtt:
        - MamSecretLambdaFunctionRole
        - Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: "exports.lambda_handler = async (event) => {\nconst response = {\nstatusCode: 200,\nbody: JSON.stringify('Hello Mam Secret Service!'),\n};\nreturn response;\n};\n"
      Runtime: nodejs16.x
      Timeout: 30
      Tags:
      - Value:
          Ref: InputApplicationTagName
        Key: application

  MamSecretLambdaFunctioPermissionResource:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: MamLambdaFunctionResource
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/get-secret
        - __Stage__: "*"
          __ApiId__:
            Ref: HTTPApiResource

  # Start API Gateway Resources
  HTTPApiResource:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mam-secret-api
      Description: HTTP API integrated with lambda.
      ProtocolType: HTTP
      Target:
        Fn::GetAtt:
        - MamLambdaFunctionResource
        - Arn
      Tags:
        Value:
          Ref: InputApplicationTagName
        Key: application
  
  HTTPApiAuthorizerResource:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: cognito_authorizer
      ApiId:
        Ref: HTTPApiResource
      JwtConfiguration:
        Audience:
        - Ref: AppPoolClientIDParameter
        Issuer:
          !Join [ "", ["https://cognito-idp.", Ref: AWS::Region, ".amazonaws.com/", Ref: UserPoolResource]]
      AuthorizerType: JWT
      IdentitySource:
      - "$request.header.Authorization"

  HTTPApiIntegrationResource:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: HTTPApiResource
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
        - MamLambdaFunctionResource
        - Arn
      ConnectionType: INTERNET
      PayloadFormatVersion: '2.0'
    DependsOn:
    - HTTPApiResource

  HTTPApiPostRouteResource:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: HTTPApiResource
      AuthorizationScopes:
        - !Join [ "/", [Ref: InputUserPoolName, read_secret_operation]]
      AuthorizationType: JWT
      RouteKey:
        Fn::Join:
        - ''
        - - POST /
          - Ref: RouteNameParameter
      AuthorizerId:
        Ref: HTTPApiAuthorizerResource
      OperationName: Post
      Target:
        Fn::Join:
        - "/"
        - - integrations
          - Ref: HTTPApiIntegrationResource
    DependsOn:
    - HTTPApiResource
    - HTTPApiIntegrationResource

Outputs:
  UserPoolARN:
    Value:
      Fn::GetAtt:
      - UserPoolResource
      - Arn
  UserPoolProviderURL:
    Value:
      Fn::GetAtt:
      - UserPoolResource
      - ProviderURL
  UserPoolProviderName:
    Value:
      Fn::GetAtt:
      - UserPoolResource
      - ProviderName
  UserPoolID:
    Value:
      Ref: UserPoolResource
  MamLambdaFunctionArn:
    Value:
      Fn::GetAtt:
      - MamLambdaFunctionResource
      - Arn
  MamLambdaFunctionName:
    Value:
      Ref: MamLambdaFunctionResource
  MamSecretLambdaFunctionRoleName:
    Value:
      Ref: MamSecretLambdaFunctionRole
